{"ast":null,"code":"var _jsxFileName = \"/media/jerome/DATA/STRATEGY/INCOME STREAMS/FREELANCING/DEV/SOLO FREELANCING/LEARNING/SOLIDITY/PROJECTS/NFT-REAL-ESTATE-APP/millow/src/App.js\",\n  _s = $RefreshSig$();\n// react hooks\nimport { useEffect, useState } from 'react';\n// ethers.js library from HardHat used to connect/bridge frontend to blockchain backend\nimport { ethers } from 'ethers';\n\n// Components\nimport Navigation from './components/Navigation';\nimport Search from './components/Search';\nimport Home from './components/Home';\n\n// ABIs\nimport RealEstate from './abis/RealEstate.json';\nimport Escrow from './abis/Escrow.json';\n\n// Config\nimport config from './config.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // using React hook, useState function, and assigning below variables to it\n  // so that we can set the account state for the component (loadBlockchainData?), and read the state too.\n  const [account, setAccount] = useState(null);\n\n  // defining/loading this function, not calling it yet. Will call it via a react hook\n  const loadBlockchainData = async () => {\n    // create connection/bridge between frontend & blockchain via an ethers.js' provider\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    // to retrieve(and select if necessary) your currently active metamask account/wallet address.\n    // any other use/reason for below transaction?\n    // and we want to now save this account(s) (selected) below with the (loadBlockchainData?) component state\n    // ok, React uses components to (re)-ORGANISE and (re)-USE our code...\n    // but components also have a state: it's like a little \"database\"/list inside the component state. to record component subvalues?\n    // Using the React component state hook, useState, we can access those values inside each component's state...\n    // And now extra functionality was added to handle when user changes accounts, for example?\n    window.ethereum.on('accountsChanged', async () => {});\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n  };\n\n  // calling the above function via the below react hook\n  useEffect(() => {\n    loadBlockchainData();\n  }, []); // this empty array for detecting/listing any changes?\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {\n      account: account,\n      setAccount: setAccount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards__section\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Welcome to Millow !\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"86F8VZ8lfjh6tQB+p37fx1M0D7Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","Navigation","Search","Home","RealEstate","Escrow","config","App","account","setAccount","loadBlockchainData","provider","providers","Web3Provider","window","ethereum","on","accounts","request","method"],"sources":["/media/jerome/DATA/STRATEGY/INCOME STREAMS/FREELANCING/DEV/SOLO FREELANCING/LEARNING/SOLIDITY/PROJECTS/NFT-REAL-ESTATE-APP/millow/src/App.js"],"sourcesContent":["// react hooks\nimport { useEffect, useState } from 'react';\n// ethers.js library from HardHat used to connect/bridge frontend to blockchain backend\nimport { ethers } from 'ethers';\n\n// Components\nimport Navigation from './components/Navigation';\nimport Search from './components/Search';\nimport Home from './components/Home';\n\n// ABIs\nimport RealEstate from './abis/RealEstate.json';\nimport Escrow from './abis/Escrow.json';\n\n// Config\nimport config from './config.json';\n\nfunction App() {  \n\n  // using React hook, useState function, and assigning below variables to it\n  // so that we can set the account state for the component (loadBlockchainData?), and read the state too.\n  const [account, setAccount] = useState(null)\n\n  // defining/loading this function, not calling it yet. Will call it via a react hook\n  const loadBlockchainData = async () => {\n    // create connection/bridge between frontend & blockchain via an ethers.js' provider\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\n    // to retrieve(and select if necessary) your currently active metamask account/wallet address.\n    // any other use/reason for below transaction?\n    // and we want to now save this account(s) (selected) below with the (loadBlockchainData?) component state\n    // ok, React uses components to (re)-ORGANISE and (re)-USE our code...\n    // but components also have a state: it's like a little \"database\"/list inside the component state. to record component subvalues?\n    // Using the React component state hook, useState, we can access those values inside each component's state...\n    // And now extra functionality was added to handle when user changes accounts, for example?\n    window.ethereum.on('accountsChanged', async () => {\n      \n    })\n    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts'})\n\n  }\n\n  // calling the above function via the below react hook\n  useEffect(() => {\n    loadBlockchainData()\n  }, []) // this empty array for detecting/listing any changes?\n\n  return (\n    <div>\n\n      {/* The below is the const pulled from the Navigation.js component */}\n      {/* and this is how you do a comment in React.js inside html */}\n      {/* and then we're also inputting here the two parameters of this function below */}\n      <Navigation account={account} setAccount={setAccount} />\n\n      <div className='cards__section'>\n\n        <h3>Welcome to Millow !</h3>\n\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C;AACA,SAASC,MAAM,QAAQ,QAAQ;;AAE/B;AACA,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,IAAI,MAAM,mBAAmB;;AAEpC;AACA,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,MAAM,MAAM,oBAAoB;;AAEvC;AACA,OAAOC,MAAM,MAAM,eAAe;AAAC;AAEnC,SAASC,GAAG,GAAG;EAAA;EAEb;EACA;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA,MAAMW,kBAAkB,GAAG,YAAY;IACrC;IACA,MAAMC,QAAQ,GAAG,IAAIX,MAAM,CAACY,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;IACnE;IACA;IACA;IACA;IACA;IACA;IACA;IACAD,MAAM,CAACC,QAAQ,CAACC,EAAE,CAAC,iBAAiB,EAAE,YAAY,CAElD,CAAC,CAAC;IACF,MAAMC,QAAQ,GAAG,MAAMH,MAAM,CAACC,QAAQ,CAACG,OAAO,CAAC;MAAEC,MAAM,EAAE;IAAqB,CAAC,CAAC;EAElF,CAAC;;EAED;EACArB,SAAS,CAAC,MAAM;IACdY,kBAAkB,EAAE;EACtB,CAAC,EAAE,EAAE,CAAC,EAAC;;EAEP,oBACE;IAAA,wBAKE,QAAC,UAAU;MAAC,OAAO,EAAEF,OAAQ;MAAC,UAAU,EAAEC;IAAW;MAAA;MAAA;MAAA;IAAA,QAAG,eAExD;MAAK,SAAS,EAAC,gBAAgB;MAAA,uBAE7B;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAA4B;MAAA;MAAA;MAAA;IAAA,QAExB;EAAA;IAAA;IAAA;IAAA;EAAA,QAEF;AAEV;AAAC,GA7CQF,GAAG;AAAA,KAAHA,GAAG;AA+CZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module"}